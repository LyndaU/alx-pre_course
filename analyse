import 'package:flutter/material.dart';

void main() {
  runApp(CalculatorApp());
}

class CalculatorApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: CalculatorScreen(),
    );
  }
}

class CalculatorScreen extends StatefulWidget {
  @override
  _CalculatorScreenState createState() => _CalculatorScreenState();
}

class _CalculatorScreenState extends State<CalculatorScreen> {
  String _output = '0';
  double _num1 = 0;
  double _num2 = 0;
  String _operator = '';
  bool _isOperatorPressed = false;

  void _onNumberPressed(String value) {
    setState(() {
      if (_isOperatorPressed) {
        _output = value;
        _isOperatorPressed = false;
      } else {
        _output = _output == '0' ? value : _output + value;
      }
    });
  }

  void _onOperatorPressed(String operator) {
    setState(() {
      _num1 = double.parse(_output);
      _operator = operator;
      _isOperatorPressed = true;
    });
  }

  void _onEqualsPressed() {
    setState(() {
      _num2 = double.parse(_output);
      switch (_operator) {
        case '+':
          _output = (_num1 + _num2).toString();
          break;
        case '-':
          _output = (_num1 - _num2).toString();
          break;
        case 'x':
          _output = (_num1 * _num2).toString();
          break;
        case '/':
          if (_num2 != 0) {
            _output = (_num1 / _num2).toString();
          } else {
            _output = 'Error';
          }
          break;
      }
      _operator = '';
    });
  }

  void _onClearPressed() {
    setState(() {
      _output = '0';
      _num1 = 0;
      _num2 = 0;
      _operator = '';
      _isOperatorPressed = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Calculator'),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Expanded(
            child: Container(
              padding: EdgeInsets.all(16.0),
              alignment: Alignment.bottomRight,
              child: Text(
                _output,
                style: TextStyle(fontSize: 48.0),
              ),
            ),
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildButton('7'),
              _buildButton('8'),
              _buildButton('9'),
              _buildButton('/'),
            ],
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildButton('4'),
              _buildButton('5'),
              _buildButton('6'),
              _buildButton('x'),
            ],
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildButton('1'),
              _buildButton('2'),
              _buildButton('3'),
              _buildButton('-'),
            ],
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildButton('0'),
              _buildButton('C', textColor: Colors.red),
              _buildButton('='),
              _buildButton('+'),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildButton(String text, {Color textColor = Colors.black}) {
    return ElevatedButton(
      onPressed: () {
        if (text == '=') {
          _onEqualsPressed();
        } else if (text == 'C') {
          _onClearPressed();
        } else if (text == '+' || text == '-' || text == 'x' || text == '/') {
          _onOperatorPressed(text);
        } else {
          _onNumberPressed(text);
        }
      },
      child: Text(
        text,
        style: TextStyle(fontSize: 24.0, color: textColor),
      ),
      style: ElevatedButton.styleFrom(
        primary: Colors.grey[300],
        minimumSize: Size(80.0, 80.0),
      ),
    );
  }
}
